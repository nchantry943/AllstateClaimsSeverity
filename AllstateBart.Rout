
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──
✔ broom        1.0.7     ✔ rsample      1.2.1
✔ dials        1.3.0     ✔ tune         1.2.1
✔ infer        1.0.7     ✔ workflows    1.1.4
✔ modeldata    1.4.0     ✔ workflowsets 1.1.0
✔ parsnip      1.2.1     ✔ yardstick    1.3.1
✔ recipes      1.1.0     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Use tidymodels_prefer() to resolve common conflicts.
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-8
> library(rpart)

Attaching package: ‘rpart’

The following object is masked from ‘package:dials’:

    prune

> library(ranger)
> library(dbarts)

Attaching package: ‘dbarts’

The following object is masked from ‘package:parsnip’:

    bart

The following object is masked from ‘package:tidyr’:

    extract

> library(embed)
> 
> train <- vroom('train.csv')
Rows: 188318 Columns: 132
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (116): cat1, cat2, cat3, cat4, cat5, cat6, cat7, cat8, cat9, cat10, cat1...
dbl  (16): id, cont1, cont2, cont3, cont4, cont5, cont6, cont7, cont8, cont9...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- vroom('test.csv')
Rows: 125546 Columns: 131
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (116): cat1, cat2, cat3, cat4, cat5, cat6, cat7, cat8, cat9, cat10, cat1...
dbl  (15): id, cont1, cont2, cont3, cont4, cont5, cont6, cont7, cont8, cont9...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> cat_columns <- names(train)[sapply(train, is.character)]
> 
> bart_mod <- parsnip::bart(trees = 100) |>
+   set_engine('dbarts') |>
+   set_mode('regression') |>
+   translate()
> 
> my_recipe <- recipe(loss ~ ., data = train) |>
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(loss)) |>
+   step_impute_knn(all_of(cat_columns), impute_with = imp_vars(loss), neighbors = 5)
> 
> prep_rec <- prep(my_recipe)
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
Warning messages:
1: In optwrap(optimizer, devfun, getStart(start, rho$pp), lower = rho$lower,  :
  convergence code -4 from nloptwrap: NLOPT_ROUNDOFF_LIMITED: Roundoff errors led to a breakdown of the optimization algorithm. In this case, the returned minimum may still be useful. (e.g. this error occurs in NEWUOA if one tries to achieve a tolerance too close to machine precision.)
2: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  unable to evaluate scaled gradient
3: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge: degenerate  Hessian with 1 negative eigenvalues
4: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  unable to evaluate scaled gradient
5: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge: degenerate  Hessian with 1 negative eigenvalues
> new_train <- bake(prep_rec, new_data = train)
> 
> workflow <- workflow() |>
+   add_recipe(my_recipe) |>
+   add_model(bart_mod) |>
+   fit(data = train)
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
Warning messages:
1: In optwrap(optimizer, devfun, getStart(start, rho$pp), lower = rho$lower,  :
  convergence code -4 from nloptwrap: NLOPT_ROUNDOFF_LIMITED: Roundoff errors led to a breakdown of the optimization algorithm. In this case, the returned minimum may still be useful. (e.g. this error occurs in NEWUOA if one tries to achieve a tolerance too close to machine precision.)
2: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  unable to evaluate scaled gradient
3: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge: degenerate  Hessian with 1 negative eigenvalues
4: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  unable to evaluate scaled gradient
5: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge: degenerate  Hessian with 1 negative eigenvalues
> 
> lin_pred <- predict(workflow, new_data = test)
Error in `step_impute_knn()`:
! The following required column is missing from `new_data` in step
  'impute_knn_2eMIf': loss.
Backtrace:
     ▆
  1. ├─stats::predict(workflow, new_data = test)
  2. └─workflows:::predict.workflow(workflow, new_data = test)
  3.   └─workflows:::forge_predictors(new_data, workflow)
  4.     ├─hardhat::forge(new_data, blueprint = mold$blueprint)
  5.     └─hardhat:::forge.data.frame(new_data, blueprint = mold$blueprint)
  6.       ├─hardhat::run_forge(blueprint, new_data = new_data, outcomes = outcomes)
  7.       └─hardhat:::run_forge.default_recipe_blueprint(...)
  8.         └─hardhat:::forge_recipe_default_process(...)
  9.           ├─recipes::bake(object = rec, new_data = new_data)
 10.           └─recipes:::bake.recipe(object = rec, new_data = new_data)
 11.             ├─recipes::bake(step, new_data = new_data)
 12.             └─recipes:::bake.step_impute_knn(step, new_data = new_data)
 13.               └─recipes::check_new_data(all_cols, object, new_data)
 14.                 └─cli::cli_abort(...)
 15.                   └─rlang::abort(...)
Execution halted
